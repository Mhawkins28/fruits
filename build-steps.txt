/*
Summary of MEN stack build steps:  
    Building a home page:
    1. stub out the route - app.get('/', (req,res)=>{})
    2. sending back a test message - res.send("message-tktk")
    3. Create a template inside a view directory - views/index.js or views/home.ejs
    4. replace res.send with a res.render()
    3. In your browser, navigate to your localhost:3000/ to confirm the route is working

    Building a new fruit route 
    1. stub out the route - app.get('/fruits', (req,res)=>{})
    2. sending back a test message - res.send("Fruit New - message-tktk")
    3. Create a template inside a view directory - views/fruits/new.ejs 
    4. Populate a form that sends a POST request to 'fruits/' - the form should contain inputs for each of the properties in your schema
    4. Replace res.send with a res.render('fruits/new')
    3. In your browser, navigate to your localhost:3000/fruits/new to confirm the route is working

    Building a create fruit route:
    0. Add express.urlencoded middleware before all of your routes 
    1. stub out the route - app.post('/fruits', (req,res)=>{})
    2. sending back a test message - res.send("Create Fruits - message-tktk")
    3. Test the new page form is sending request and showing your creates response message
    4. setup your try catch inside the route callback
    5. make a DB call to Fruit.create(req.body)
    6. Redirect on success back to home or fruits index route (note: will cause error without route being defined first)

    Building an fruits index route:
    0. Repeat standard setup steps
    1. access data from DB -  Fruit.find() -> [ ]
    2. sent the data directly to the client - res.send(allFruits)
    3. renders the template - res.render('fruits/show', {fruits: allFruits})

    Building a show route:
    0. Repeat standard setup steps
    1. path -> '/fruits/:id'
    2. method -> GET
    3. DB loopup -> Fruit.findById(req.params.id) / Fruit.findOne( {name: "example"})
    4. express response -> res.render() -> render information about a single fruit

    Build a delete route:
    1. install method-override dependency
    2. import library to server.js - const methodOverride('method-override')
    3. mount the methodOverride middleware before your routes -  app.use() 
    4. add a form to your show route which includes a correctly structured action string - 
        4a. your form tag should look like: <form action="<endpoint-for-delete>?_method=DELETE" method=POST>...</form>
    5. define your app.delete() route 
        5a. path - '/fruits/:id'
        5b. method - DELETE
        5c. populate try catch
        5d. make your database call inside your and log results
        5e. redirect back to fruits index route 
    6. Test your form is routed correctly 

    Build an edit route
    1. define your app.get() route
      1a. path - '/fruits/:id/edit'
      1b. method - GET
      1c. populate try catch
      1d. make database call for current fruit - Fruit.findById(req.params.id)
      1e. create a new template and add a form which includes a correctly structured action string - 
        - your form's opening tag should look like: <form action="/fruits/<%=fruit._id%>?_method=PUT" method=POST>...</form>
        - your form body should include inputs tags for all fields you want to edit 
        - note: your form input should include a value attribute to pre populate your data-
            <input ...  value="<%= fruit.name %>"/> 
      1e. render template ('fruits/edit.ejs') and pass context {fruit: foundFruit}

    Build an update route
    1. define your app.put() route
      1a. path - '/fruits/:id/'
      1b. method - PUT
      1c. test req.body content contains form data from edit page
      1d. parse any incoming data to match the values expected by the schema (ex: isReadyToEat might send "on" -- needs to be converted to boolean first)
      1c. populate try catch
      1d. make database call for current fruit - Fruit.findByIdAndUpdate(req.params.id, req.body, {new:true})
    2. After data is updated in DB, redirect back to show page for fruit.
*/